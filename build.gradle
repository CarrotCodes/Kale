buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.1'
    }
}

apply plugin: "java"
apply plugin: "kotlin"
apply plugin: "idea"
apply plugin: "com.github.johnrengelman.shadow"

compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

sourceSets {
    main.java.srcDirs += 'src/main/java'
    main.java.srcDirs += 'src/main/kotlin'
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile group: 'com.google.guava', name: 'guava', version: '19.0'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.9'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.0.42-beta'
    testCompile group: 'ch.qos.logback', name:'logback-classic', version: '1.1.2'

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

shadowJar {
    dependencies {
        exclude(dependency('org.slf4j:slf4j-api:.*'))
        exclude(dependency('com.google.guava:guava-base:.*'))
    }

    def repack_location = "engineer.carrot.warren.pellet.repack"

    relocate 'kotlin', "${repack_location}.kotlin"
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardError"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}

version = version_major + '.' + version_minor + '.' + version_patch
group = "engineer.carrot.warren.pellet"
archivesBaseName = "Pellet"

if (System.getenv().BUILD_NUMBER != null) {//adds the build number to the end of the version string if on a build server
    version += ".${System.getenv().BUILD_NUMBER}"
}

def env = System.getenv()

// Get Jenkins metadata
ext.jenkinsManifest = manifest {
    if (env.BUILD_TAG != null) { // If this works, we'll assume we're in Jenkins at least.
        attributes("Jenkins-Build": "true", "Jenkins-Tag": env.BUILD_TAG, "Jenkins-ID": env.BUILD_ID)
    } else {
        attributes("Jenkins-Build": "false")
    }
}

// Get Git metadata (if in Jenkins)
ext.gitManifest = manifest {
    if (env.GIT_BRANCH != null) {
        attributes("Git-Branch": env.GIT_BRANCH, "Git-Hash": env.GIT_COMMIT)
    }
}

// Maven deployment
apply plugin: 'maven'

if (!project.hasProperty("DEPLOY_DIR")) {
    ext.DEPLOY_DIR = null
}

artifacts {
    archives shadowJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://${DEPLOY_DIR}")
        }
    }
}

uploadArchives.onlyIf { return DEPLOY_DIR != null }
